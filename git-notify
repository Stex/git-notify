#!/bin/bash

#----------Your Repository Settings----------
repository="git://github.com/Stex/git-notify.git"
branch="master"
#---------- Do not edit below here ----------



#------------------Variables-----------------
#Our current working directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

#The notifier script, just a better name for $0
notify_script="$0"

#The file the process PID is written to
pid_file="./git-notify.pid"

#The first command line argument for our script.
#Defaults to 'start'
command=${1:-start}
#--------------------------------------------

case "$command" in
    start)
	#Check if the script is already running (resp. if a PID-file exists)
	#If yes, we don't want to start it again.
	#TODO: check if the process is actually running using e.g. ps
        if [ -f "$pid_file" ]
        then
            echo "Commit watcher is already running."
        else
            $notify_script run &
            echo $! > "$pid_file"
            echo "Commit watcher started at $!"
        fi
        ;;
    stop)
	#Check if there is a PID-file. If no, we cannot close the watcher.
        if [ -f "$pid_file" ]
	then
		echo "Stopping commit watcher"
        	kill -9 $(<"$pid_file")
		$(rm "$pid_file")
	fi
        ;;
    *)
        #Simply run the watcher
        # how we want to extract the variables from the commit message.
        format_name="--format=%cn"
        format_when="--format=%cr"
        format_summary="--format=%s"
        format_body="--format=%b"

        latest_revision="none"

        # loop forever, need to kill the process.
        while [ 1 ]; do

            # get the latest revision SHA.
            current_revision=$(git ls-remote --heads $repository $branch | tail -n 1)

            # if we haven't seen that one yet, then we know there's new stuff.
            if [ "$latest_revision" != "$current_revision" ]; then

                # mark the newest revision as seen.
                latest_revision=$current_revision

                # extract the details from the log.
                commit_name=`git log -1 $format_name $latest_revision`
                commit_when=`git log -1 $format_when $latest_revision`
                commit_summary=`git log -1 $format_summary $latest_revision`
                commit_body=`git log -1 $format_body $latest_revision`

                # notify the user of the commit.
                summary="$commit_name committed to $branch $commit_when!"
                body="$commit_summary\n\n$commit_body"
                `notify-send "$summary" "$body"`

            fi
            sleep 60
        done

        ;;
esac
exit 0




